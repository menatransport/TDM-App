"use client";

import { useState, useEffect, useMemo } from "react";
import {
  Search,
  Filter,
  Calendar,
  User,
  Truck,
  Package,
  Eye,
  Edit,
  Trash2,
  Plus,
  Download,
  RefreshCw,
  MapPin,
  Clock,
  Phone,
  NotebookPen,
  ChevronUp,
  ChevronDown,
  AlertCircle,
  BookOpenCheck,
  CircleX,
  Check,
  FileSpreadsheet,
  ChartPie,
} from "lucide-react";
import Swal from "sweetalert2";
import { AdminView } from "@/components/AdminView";
import { AdminCreateNew } from "@/components/AdminCreateNew";
import { AdminMap } from "@/components/AdminMap";
import { TransportItem } from "@/lib/type";
import { usegetListName } from "@/lib/userStore";
import * as XLSX from 'xlsx';

const itemsPerPage = 10;
const today = new Date().toISOString().split("T")[0];
const sevenDaysAgo = new Date(
  new Date(today).getTime() - 7 * 24 * 60 * 60 * 1000
)
  .toISOString()
  .split("T")[0];
const tomorrow = new Date(new Date(today).getTime() + 1 * 24 * 60 * 60 * 1000)
  .toISOString()
  .split("T")[0];

export const Admintool = () => {
  const listname = usegetListName();
  const [filters, setFilters] = useState({
    date_plan: { date_plan_start: sevenDaysAgo, date_plan_end: tomorrow },
    load_id: "",
    driver_name: "",
    h_plate: "",
    status: "",
  });
  const [showDriverSuggestions, setShowDriverSuggestions] = useState(false);
  const [filteredDriverNames, setFilteredDriverNames] = useState<string[]>([]);
  const [showLoadIdSuggestions, setShowLoadIdSuggestions] = useState(false);
  const [filteredLoadIds, setFilteredLoadIds] = useState<string[]>([]);
  const [transportData, setTransportData] = useState<TransportItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [sortColumn, setSortColumn] = useState<keyof TransportItem | null>(
    null
  );
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
  const [currentPage, setCurrentPage] = useState(1);
  const [cancel, setCancel] = useState("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å");
  const [deleteAlert, setDeleteAlert] = useState<{
    show: boolean;
    load_id: string;
  }>({
    show: false,
    load_id: "",
  });
  const [modalView, setmodalView] = useState<{
    show: boolean;
    job: TransportItem | null;
  }>({
    show: false,
    job: null,
  });

  const [modalCreate, setmodalCreate] = useState<{
    show: boolean;
  }>({
    show: false,
  });

  const [modalMap, setmodalMap] = useState<{
    show: boolean;
  }>({
    show: false,
  });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    // console.log("üìã Listname ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Login:", listname);
  }, []);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time highlight
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 30000); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, []);

  const handleSearch = async () => {
    setLoading(true);
    // 1. ‡πÅ‡∏¢‡∏Å date_plan ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    const { date_plan, ...restFilters } = filters;

    // 2. ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    const filtered = Object.fromEntries(
      Object.entries(restFilters).filter(
        ([_, value]) => value !== "" && value !== null && value !== undefined
      )
    );

    const searchParams = new URLSearchParams();

    Object.entries(filtered).forEach(([key, value]) => {
      if (typeof value === "string" && value.includes(",")) {
        value.split(",").forEach((v) => {
          searchParams.append(key, v.trim());
        });
      } else {
        searchParams.append(key, String(value));
      }
    });

    if (date_plan?.date_plan_start) {
      searchParams.append("date_plan_start", date_plan.date_plan_start);
    }
    if (date_plan?.date_plan_end) {
      searchParams.append("date_plan_end", date_plan.date_plan_end);
    }

    const queryString = searchParams.toString();
    try {
      const access_token = localStorage.getItem("access_token");
      const res = await fetch("/api/admin", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${access_token}`,
          query: queryString,
        },
      });
      const data = await res.json();
       console.log("üöö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", data);
      setTransportData(data.jobs);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching data:", error);
      setLoading(false);
    }

    // setTimeout(() => {
    //   let filteredData = mockData;

    //   setTransportData(filteredData);
    //   setLoading(false);
    // }, 1000);
  };

  const handleDriverNameChange = (value: string) => {
    setFilters((prev) => ({
      ...prev,
      driver_name: value,
    }));

    // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (comma) ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const names = value.split(",").map((name) => name.trim());
    const lastInputName = names[names.length - 1];

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå
    if (lastInputName.length > 0) {
      const filtered = listname.filter((name) => {
        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        const isAlreadySelected = names
          .slice(0, -1)
          .some(
            (selectedName) => selectedName.toLowerCase() === name.toLowerCase()
          );

        return (
          !isAlreadySelected &&
          name.toLowerCase().includes(lastInputName.toLowerCase())
        );
      });
      setFilteredDriverNames(filtered);
      setShowDriverSuggestions(filtered.length > 0);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏•‡∏±‡∏á comma ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const selectedNames = names.slice(0, -1);
      const availableNames = listname.filter(
        (name) =>
          !selectedNames.some(
            (selectedName) => selectedName.toLowerCase() === name.toLowerCase()
          )
      );
      setFilteredDriverNames(availableNames);
      setShowDriverSuggestions(availableNames.length > 0);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å dropdown
  const handleSelectDriverName = (name: string) => {
    const currentValue = filters.driver_name;
    const names = currentValue.split(",").map((n) => n.trim());

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    names[names.length - 1] = name;

    // ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
    const newValue = names.join(", ");
    setFilters((prev) => ({
      ...prev,
      driver_name: newValue,
    }));
    setShowDriverSuggestions(false);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô suggestions ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
  const handleDriverBlur = () => {
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô dropdown ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(() => {
      setShowDriverSuggestions(false);
    }, 200);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Load ID Search
  const handleLoadIdChange = (value: string) => {
    setFilters((prev) => ({
      ...prev,
      load_id: value,
    }));

    // ‡πÅ‡∏¢‡∏Å load_id ‡∏ï‡∏≤‡∏°‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (comma) ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤ ID ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const loadIds = value.split(",").map((id) => id.trim());
    const lastInputId = loadIds[loadIds.length - 1];

    // ‡∏î‡∏∂‡∏á load_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å transportData
    const uniqueLoadIds = [...new Set(transportData.map(item => item.load_id))];

    // ‡∏Å‡∏£‡∏≠‡∏á load_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå
    if (lastInputId.length > 0) {
      const filtered = uniqueLoadIds.filter((loadId) => {
        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        const isAlreadySelected = loadIds
          .slice(0, -1)
          .some(
            (selectedId) => selectedId.toLowerCase() === loadId.toLowerCase()
          );

        return (
          !isAlreadySelected &&
          loadId.toLowerCase().includes(lastInputId.toLowerCase())
        );
      });
      setFilteredLoadIds(filtered);
      setShowLoadIdSuggestions(filtered.length > 0);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏•‡∏±‡∏á comma ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ID ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const selectedIds = loadIds.slice(0, -1);
      const availableIds = uniqueLoadIds.filter(
        (loadId) =>
          !selectedIds.some(
            (selectedId) => selectedId.toLowerCase() === loadId.toLowerCase()
          )
      );
      setFilteredLoadIds(availableIds.slice(0, 10)); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      setShowLoadIdSuggestions(availableIds.length > 0);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Load ID ‡∏à‡∏≤‡∏Å dropdown
  const handleSelectLoadId = (loadId: string) => {
    const currentValue = filters.load_id;
    const loadIds = currentValue.split(",").map((id) => id.trim());

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà ID ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    loadIds[loadIds.length - 1] = loadId;

    // ‡∏£‡∏ß‡∏° ID ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
    const newValue = loadIds.join(", ");
    setFilters((prev) => ({
      ...prev,
      load_id: newValue,
    }));
    setShowLoadIdSuggestions(false);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô load_id suggestions ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
  const handleLoadIdBlur = () => {
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô dropdown ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(() => {
      setShowLoadIdSuggestions(false);
    }, 200);
  };

  // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• filter
  const resetFilters = () => {
    setFilters({
      date_plan: { date_plan_start: sevenDaysAgo, date_plan_end: today },
      load_id: "",
      driver_name: "",
      h_plate: "",
      status: "",
    });
    setTransportData([]);
    setShowDriverSuggestions(false);
    setShowLoadIdSuggestions(false);
    setFilteredDriverNames([]);
    setFilteredLoadIds([]);
  };

  // ‚úÖ Excel Export Function
  const handleExcelExport = () => {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
      const now = new Date();
      const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, -5); // Format: YYYY-MM-DDTHH-MM-SS
      const filename = `${timestamp}_menafasttrack.xlsx`;
      const ticketdata = transportData; // ‡πÉ‡∏ä‡πâ transportData ‡πÅ‡∏ó‡∏ô mockData
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel
      const excelData = transportData.map((item, index) => ({
        '‡∏•‡∏≥‡∏î‡∏±‡∏ö': index + 1,
        '‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏ô‡∏™‡πà‡∏á': item.load_id || '',
        '‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏à‡∏™.': item.driver_name || '',
        '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß': item.h_plate || '',
        '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏≤‡∏á': item.t_plate || '',
        '‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á': item.locat_recive || '',
        '‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á': item.locat_deliver || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': item.date_recive || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': item.date_deliver || '',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': item.status || '',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô': item.job_type || '',
        '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': item.weight || '',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á': item.fuel_type || '',
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': item.remark || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô': item.ticket_info?.start_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á': item.ticket_info?.origin_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': item.ticket_info?.start_recive_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à': item.ticket_info?.end_recive_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á': item.ticket_info?.intransit_datetime || '',
        // '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á': item.ticket_info?.desination_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£': item.ticket_info?.docs_submitted_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': item.ticket_info?.start_unload_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à': item.ticket_info?.end_unload_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£': item.ticket_info?.docs_returned_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á': item.ticket_info?.complete_datetime || '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á': item.create_at || '',
        '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î': item.update_at || ''
      }));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á workbook ‡πÅ‡∏•‡∏∞ worksheet
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(excelData);

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á columns
      const colWidths = [
        { wch: 8 },   // ‡∏•‡∏≥‡∏î‡∏±‡∏ö
        { wch: 15 },  // ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏ô‡∏™‡πà‡∏á
        { wch: 20 },  // ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏à‡∏™.
        { wch: 12 },  // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß
        { wch: 12 },  // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏≤‡∏á
        { wch: 25 },  // ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        { wch: 25 },  // ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        { wch: 15 },  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        { wch: 15 },  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        { wch: 18 },  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        { wch: 12 },  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
        { wch: 12 },  // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        { wch: 15 },  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á
        { wch: 30 },  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        { wch: 15 },  //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        { wch: 20 },  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        { wch: 20 }   // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      ];
      worksheet['!cols'] = colWidths;

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° worksheet ‡πÄ‡∏Ç‡πâ‡∏≤ workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');

      XLSX.writeFile(workbook, filename);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Swal.fire({
        title: '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        text: `‡πÑ‡∏ü‡∏•‡πå ${filename} ‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß`,
        icon: 'success',
        showConfirmButton: false,
        draggable: true
      });

    } catch (error) {
      console.error('Error exporting to Excel:', error);
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
        text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        icon: 'error',
        draggable: true
      });
    }
  };

  // ‚úÖ ‡∏î‡∏π / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö
  const handleView = (id: any) => {
    const jobData = transportData.find((item) => item.load_id === id); // ‚úÖ ‡πÉ‡∏ä‡πâ find
    if (jobData) {
      setmodalView({ show: true, job: jobData });
    }
  };


  const handleClose = (close: boolean) => {
    setmodalView((prev) => ({ ...prev, show: close }));
    setmodalCreate((prev) => ({ ...prev, show: close }));
    setmodalMap((prev) => ({ ...prev, show: close }));
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô":
        return "bg-gradient-to-r from-green-50 to-green-100 text-green-800 border-green-200";
      case "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô":
      case "‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á":
      case "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
      case "‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à":
        return "bg-gradient-to-r from-blue-50 to-blue-100 text-blue-800 border-blue-200";
      case "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á":
        return "bg-gradient-to-r from-yellow-50 to-yellow-100 text-yellow-800 border-yellow-300";
      case "‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á":
      case "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
      case "‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à":
        return "bg-gradient-to-r from-purple-50 to-purple-100 text-purple-800 border-purple-200";
      case "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß (POD)":
        return "bg-gradient-to-r from-green-100 to-green-200 text-green-900 border-green-300";
      case "‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó":
      case "‡∏ã‡πà‡∏≠‡∏°":
      case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
      case "‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß":
        return "bg-gradient-to-r from-red-50 to-red-100 text-red-900 border-red-200";
      default:
        return "bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getRowHighlight = (item: TransportItem) => {
    const receiveTime = item.date_recive ? new Date(item.date_recive) : null;
    const deliverTime = item.date_deliver ? new Date(item.date_deliver) : null;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô"
    const isTargetStatus_origin = item.status === "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô" || item.status === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô";
    const isTargetStatus_deliver = item.status === "‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á" || item.status === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" || item.status === "‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à" || item.status === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á";
    if (!isTargetStatus_origin && !isTargetStatus_deliver) {
      return ""; 
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (date_recive)
    if (receiveTime && isTargetStatus_origin) {
      const oneHourBeforeReceive = new Date(receiveTime.getTime() - (60 * 60 * 1000));
      
      // ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      if (currentTime >= receiveTime) {
        return " border-l-4 border-red-500 border-b-0 ";
      }
      
      // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) - ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      if (currentTime >= oneHourBeforeReceive && currentTime < receiveTime) {
        return " border-l-4 border-yellow-400 border-b-0 ";
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (date_deliver)
    if (deliverTime && isTargetStatus_deliver) {
      const oneHourBeforeDeliver = new Date(deliverTime.getTime() - (60 * 60 * 1000));
      
      // ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      if (currentTime >= deliverTime) {
        return "border-l-4 border-red-500 border-b-0 ";
      }
      
      // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) - ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      if (currentTime >= oneHourBeforeDeliver && currentTime < deliverTime) {
        return "border-l-4 border-yellow-400 border-b-0 ";
      }
    }

    return ""; 
  };

  // Sort data
  const sortedData = useMemo(() => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° highlight ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° column ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    return [...transportData].sort((a, b) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö highlight priority
      const aHighlight = getRowHighlight(a);
      const bHighlight = getRowHighlight(b);
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á highlight
      const getHighlightPriority = (highlight: string) => {
        if (highlight.includes('border-red-500')) return 1; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á = ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1 (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
        if (highlight.includes('border-yellow-400')) return 2; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á = ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2
        return 3; // ‡πÑ‡∏°‡πà‡∏°‡∏µ highlight = ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 3 (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
      };
      
      const aPriority = getHighlightPriority(aHighlight);
      const bPriority = getHighlightPriority(bHighlight);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≠‡∏¢ = ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
      if (aPriority !== bPriority) {
        return aPriority - bPriority;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° column ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (sortColumn) {
        const aVal = a[sortColumn] ?? "";
        const bVal = b[sortColumn] ?? "";
        
        if (aVal < bVal) return sortDirection === "asc" ? -1 : 1;
        if (aVal > bVal) return sortDirection === "asc" ? 1 : -1;
        return 0;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ highlight (priority = 3)
      // ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° date_recive ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)
      if (aPriority === 3 && bPriority === 3) {
        const aReceiveDate = a.date_recive ? new Date(a.date_recive) : new Date(0);
        const bReceiveDate = b.date_recive ? new Date(b.date_recive) : new Date(0);
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)
        if (aReceiveDate > bReceiveDate) return -1;
        if (aReceiveDate < bReceiveDate) return 1;
      }
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° load_id
      const aLoadId = a.load_id;
      const bLoadId = b.load_id;
      if (aLoadId < bLoadId) return -1;
      if (aLoadId > bLoadId) return 1;
      return 0;
    });
  }, [transportData, sortColumn, sortDirection, currentTime]);

  // Paging data

  // Paging data
  const totalPages = Math.ceil(sortedData.length / itemsPerPage);
  const currentData = sortedData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleSort = (column: keyof TransportItem) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };

  const renderSortIcons = (column: keyof TransportItem) => (
    <span className="inline ml-1">
      <ChevronUp
        onClick={() => handleSort(column)}
        className={`w-4 h-4 inline cursor-pointer hover:text-blue-600 ${
          sortColumn === column && sortDirection === "asc"
            ? "text-blue-600"
            : "text-gray-600"
        }`}
      />
      <ChevronDown
        onClick={() => handleSort(column)}
        className={`w-4 h-4 inline cursor-pointer hover:text-blue-600 ${
          sortColumn === column && sortDirection === "desc"
            ? "text-blue-600"
            : "text-gray-600"
        }`}
      />
    </span>
  );

  const confirmDelete = async () => {
    let value = { status: cancel };
    let jobid = deleteAlert.load_id;
    const access_token = localStorage.getItem("access_token");
    try {
      setDeleteAlert({ show: false, load_id: "" });
      const res_data = await fetch("/api/jobs", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${access_token}`,
          id: jobid ?? "",
        },
        body: JSON.stringify(value),
      });

      if (!res_data.ok) throw new Error("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setTransportData((prev) =>
        prev.map((item) =>
          item.load_id === jobid ? { ...item, status: value.status } : item
        )
      );
      handleSearch();
      Swal.fire({
        title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        icon: "success",
        draggable: true,
      });
    } catch (error) {
      console.log("error : ", error);
      Swal.fire({
        title: "" + error,
        icon: "error",
        draggable: true,
      });
    }
  };

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    handleSearch();
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-20 -left-20 w-40 h-40 bg-green-200 bg-opacity-30 rounded-full animate-pulse"></div>
        <div className="absolute top-1/4 -right-16 w-32 h-32 bg-emerald-200 bg-opacity-20 rounded-full"></div>
        <div className="absolute bottom-1/4 -left-12 w-24 h-24 bg-green-300 bg-opacity-25 rounded-full"></div>
        <div className="absolute bottom-20 right-1/4 w-16 h-16 bg-emerald-300 bg-opacity-30 rounded-full"></div>
      </div>

      <div className="relative z-10 container mx-auto px-4 py-6">
        {/* Header */}
        <div className="bg-white backdrop-blur-md rounded-2xl shadow-xl border border-white/30 p-6 mb-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á
              </h1>
              <p className="text-gray-600">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
            </div>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setmodalCreate({ show: true })}
                className="bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                <Plus size={20} />
                <span className="hidden sm:inline">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
              </button>
              <button 
                onClick={() => window.open('https://lookerstudio.google.com/s/vjSdVuS7MCg', '_blank')}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all duration-200 shadow hover:shadow-md border border-gray-200"
              >
                <ChartPie  size={20} />
                <span className="hidden sm:inline">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</span>
              </button>
            </div>
          </div>
        </div>

        {/* Filter Section */}
        <div className="bg-white backdrop-blur-md rounded-2xl shadow-xl border border-white/30 p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-800 flex items-center gap-2">
              <Filter size={24} />
              ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </h2>
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="md:hidden bg-gray-200 hover:bg-gray-300 p-2 rounded-lg transition-colors"
            >
              <ChevronDown size={20} />
            </button>
          </div>

          <div
            className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 ${
              showFilters ? "block" : "hidden md:grid"
            }`}
          >
            {/* Date Range */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <Calendar size={16} />
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
              </label>
              <input
                type="date"
                value={filters.date_plan.date_plan_start}
                onChange={(e) =>
                  setFilters((prev) => ({
                    ...prev,
                    date_plan: {
                      ...prev.date_plan,
                      date_plan_start: e.target.value,
                    },
                  }))
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              />
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <Calendar size={16} />
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
              </label>
              <input
                type="date"
                value={filters.date_plan.date_plan_end}
                onChange={(e) =>
                  setFilters((prev) => ({
                    ...prev,
                    date_plan: {
                      ...prev.date_plan,
                      date_plan_end: e.target.value,
                    },
                  }))
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              />
            </div>

            {/* Load ID */}
            <div className="space-y-2 relative">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <Package size={16} />
                ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏ô‡∏™‡πà‡∏á (Shipment ID)
              </label>
              <input
                type="text"
                value={filters.load_id}
                onChange={(e) => handleLoadIdChange(e.target.value)}
                onBlur={handleLoadIdBlur}
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    const currentValue = filters.load_id;
                    const loadIds = currentValue.split(",").map((id) => id.trim());
                    const lastInputId = loadIds[loadIds.length - 1];

                    // ‡∏´‡∏≤ load_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏ô suggestions
                    const uniqueLoadIds = [...new Set(transportData.map(item => item.load_id))];
                    const exactMatch = uniqueLoadIds.find(
                      (loadId) =>
                        loadId.toLowerCase() === lastInputId.toLowerCase()
                    );

                    const firstSuggestion =
                      filteredLoadIds.length > 0
                        ? filteredLoadIds[0]
                        : null;

                    if (exactMatch) {
                      // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏ä‡πâ ID ‡∏ô‡∏±‡πâ‡∏ô
                      loadIds[loadIds.length - 1] = exactMatch;
                      const newValue = loadIds.join(", ") + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        load_id: newValue,
                      }));
                    } else if (firstSuggestion) {
                      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏ä‡πâ ID ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô suggestions
                      loadIds[loadIds.length - 1] = firstSuggestion;
                      const newValue = loadIds.join(", ") + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        load_id: newValue,
                      }));
                    } else if (lastInputId.trim().length > 0) {
                      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô suggestions ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° comma
                      const newValue = currentValue + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        load_id: newValue,
                      }));
                    }
                    setShowLoadIdSuggestions(false);
                  }
                }}
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏ô‡∏™‡πà‡∏á..."
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              />

              {/* Autocomplete dropdown for Load ID */}
              {showLoadIdSuggestions && filteredLoadIds.length > 0 && (
                <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-40 overflow-y-auto">
                  {filteredLoadIds.map((loadId, index) => {
                    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å transportData
                    const jobData = transportData.find(item => item.load_id === loadId);
                    return (
                      <div
                        key={index}
                        className="px-3 py-2 hover:bg-emerald-50 cursor-pointer text-sm border-b border-gray-100 last:border-b-0"
                        onClick={() => handleSelectLoadId(loadId)}
                      >
                        <div className="font-medium text-gray-800">{loadId}</div>
                        {jobData && (
                          <div className="text-xs text-gray-500">
                            {jobData.driver_name} ‚Ä¢ {jobData.h_plate} ‚Ä¢ {jobData.locat_deliver} 
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Driver Name */}
            <div className="space-y-2 relative">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <User size={16} />
                ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏à‡∏™.
              </label>
              <input
                type="text"
                value={filters.driver_name}
                onChange={(e) => handleDriverNameChange(e.target.value)}
                onBlur={handleDriverBlur}
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    const currentValue = filters.driver_name;
                    const names = currentValue.split(",").map((n) => n.trim());
                    const lastInputName = names[names.length - 1];

                    // ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏ô suggestions
                    const exactMatch = listname.find(
                      (name) =>
                        name.toLowerCase() === lastInputName.toLowerCase()
                    );

                    const firstSuggestion =
                      filteredDriverNames.length > 0
                        ? filteredDriverNames[0]
                        : null;

                    if (exactMatch) {
                      // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
                      names[names.length - 1] = exactMatch;
                      const newValue = names.join(", ") + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        driver_name: newValue,
                      }));
                    } else if (firstSuggestion) {
                      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å‡πÉ‡∏ô suggestions
                      names[names.length - 1] = firstSuggestion;
                      const newValue = names.join(", ") + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        driver_name: newValue,
                      }));
                    } else if (lastInputName.trim().length > 0) {
                      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô suggestions ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° comma
                      const newValue = currentValue + ", ";
                      setFilters((prev) => ({
                        ...prev,
                        driver_name: newValue,
                      }));
                    }
                    setShowDriverSuggestions(false);
                  }
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              />

              {/* Autocomplete dropdown */}
              {showDriverSuggestions && filteredDriverNames.length > 0 && (
                <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-40 overflow-y-auto">
                  {filteredDriverNames.map((name, index) => (
                    <div
                      key={index}
                      className="px-3 py-2 hover:bg-emerald-50 cursor-pointer text-sm border-b border-gray-100 last:border-b-0"
                      onClick={() => handleSelectDriverName(name)}
                    >
                      {name}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Vehicle Number */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <Truck size={16} />
                ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
              </label>
              <input
                type="text"
                value={filters.h_plate}
                onChange={(e) =>
                  setFilters((prev) => ({ ...prev, h_plate: e.target.value }))
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              />
            </div>

            {/* Status */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-600 flex items-center gap-2">
                <BookOpenCheck size={16} />
                ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
              </label>
              <select
                value={
                  filters.status ===
                  "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô,‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á,‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à"
                    ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á"
                    : filters.status === "‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß,‡∏ã‡πà‡∏≠‡∏°,‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó,‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                    ? "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô"
                    : filters.status
                }
                onChange={(e) =>
                  setFilters((prev) => {
                    if (e.target.value == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á")
                      return {
                        ...prev,
                        status:
                          "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô,‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á,‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á,‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à",
                      };
                    if (e.target.value == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô")
                      return {
                        ...prev,
                        status: "‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß,‡∏ã‡πà‡∏≠‡∏°,‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó,‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                      };
                    return { ...prev, status: e.target.value };
                  })
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
                <optgroup className="text-yellow-800" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å">
                  <option className="text-yellow-600" value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô">
                    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
                  </option>
                  <option className="text-blue-600" value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á
                  </option>
                  <option className="text-green-800" value="‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß (POD)">
                    ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                  </option>
                  <option className="text-red-800" value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </option>
                </optgroup>
                <optgroup className="text-gray-600" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢">
                  <option value="‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô">‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô</option>
                  <option value="‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á">‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á</option>
                  <option value="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
                  <option value="‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à">‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à</option>
                  <option value="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á</option>
                  <option value="‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á">‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</option>
                  <option value="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
                  <option value="‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à">‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à</option>
                  <option value="‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß">‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß</option>
                  <option value="‡∏ã‡πà‡∏≠‡∏°">‡∏ã‡πà‡∏≠‡∏°</option>
                  <option value="‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó">‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</option>
                  <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                </optgroup>
              </select>
            </div>
          </div>

          <div
            className={`flex flex-col sm:flex-row gap-3 mt-6 ${
              showFilters ? "block" : "hidden md:flex"
            }`}
          >
            <button
              onClick={handleSearch}
              disabled={loading}
              className="bg-emerald-500 hover:bg-emerald-600 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg flex items-center justify-center gap-2 transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              {loading ? (
                <RefreshCw size={20} className="animate-spin" />
              ) : (
                <Search size={20} />
              )}
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." : "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </button>
            <button
              onClick={resetFilters}
              className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg flex items-center justify-center gap-2 transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <RefreshCw size={20} />
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </button>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
          <div className="bg-white backdrop-blur-md rounded-xl shadow-lg border border-white/30 p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                <p className="text-2xl font-bold text-gray-800">
                  {transportData.length}
                </p>
              </div>
              <div className="bg-blue-100 p-3 rounded-full">
                <Package className="text-blue-600" size={24} />
              </div>
            </div>
          </div>

          <div className="bg-white backdrop-blur-md rounded-xl shadow-lg border border-white/30 p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</p>
                <p className="text-2xl font-bold text-red-800">
                  {
                    transportData.filter(
                      (item) =>
                        item.status === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ||
                        item.status === "‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß" ||
                        item.status === "‡∏ã‡πà‡∏≠‡∏°" ||
                        item.status === "‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
                    ).length
                  }
                </p>
              </div>
              <div className="bg-red-100 p-3 rounded-full">
                <CircleX className="text-red-600" size={24} />
              </div>
            </div>
          </div>

          <div className="bg-white backdrop-blur-md rounded-xl shadow-lg border border-white/30 p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {
                    transportData.filter(
                      (item) => item.status === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô"
                    ).length
                  }
                </p>
              </div>
              <div className="bg-yellow-100 p-3 rounded-full">
                <Clock className="text-yellow-600" size={24} />
              </div>
            </div>
          </div>

          <div className="bg-white backdrop-blur-md rounded-xl shadow-lg border border-white/30 p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á</p>
                <p className="text-2xl font-bold text-blue-600">
                  {
                    transportData.filter(
                      (item) =>
                        item.status === "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô" ||
                        item.status === "‡∏ñ‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á" ||
                        item.status === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ||
                        item.status === "‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à" ||
                        item.status === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏™‡πà‡∏á" ||
                        item.status === "‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á" ||
                        item.status === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ||
                        item.status === "‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à"
                    ).length
                  }
                </p>
              </div>
              <div className="bg-blue-100 p-3 rounded-full">
                <Truck className="text-blue-600" size={24} />
              </div>
            </div>
          </div>

          <div className="bg-white backdrop-blur-md rounded-xl shadow-lg border border-white/30 p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>
                <p className="text-2xl font-bold text-green-600">
                  {
                    transportData.filter(
                      (item) => item.status === "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß (POD)"
                    ).length
                  }
                </p>
              </div>
              <div className="bg-green-100 p-3 rounded-full">
                <Check className="text-green-600" size={24} />
              </div>
            </div>
          </div>
        </div>

        {/* Data Table */}
        <div className="bg-white backdrop-blur-md rounded-2xl shadow-xl border border-white/30 overflow-hidden relative">
          <div className="p-4 bg-gray-500 border-b border-gray-200">
            <h2 className="text-xl text-white font-semibold text-gray-800">
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á
            </h2>
            <p className="text-white mt-1">
              ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {transportData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </p>
            <div className="absolute top-4 right-4 flex flex-col sm:flex-row gap-2">
             <button
                onClick={() => handleExcelExport()}
                className="bg-emerald-600 border border-white hover:bg-emerald-800 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                <FileSpreadsheet  size={20} />
                <span className="hidden sm:inline">Excel</span>
              </button>
            </div>
            <div className="flex justify-end items-center gap-2 text-sm text-gray-600">
              
              <button
                disabled={currentPage === 1}
                onClick={() => setCurrentPage((p) => p - 1)}
                className="px-3 py-1 border text-white rounded hover:bg-gray-100 hover:text-gray-600 disabled:opacity-40"
              >
                ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </button>
              <span className="text-gray-200">
                ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}
              </span>
              <button
                disabled={currentPage === totalPages}
                onClick={() => setCurrentPage((p) => p + 1)}
                className="px-3 py-1 border text-white rounded hover:bg-gray-100 hover:text-gray-600 disabled:opacity-40"
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </button>
            </div>
          </div>

          {/* Loading Overlay */}
          {loading && (
            <div className="absolute top-1/3 inset-0 bg-white bg-opacity-75 backdrop-blur-sm flex items-center justify-center z-10">
              <div className="flex flex-col items-center gap-4">
                <div className="relative">
                  <div className="w-12 h-12 border-4 border-emerald-200 border-t-emerald-500 rounded-full animate-spin"></div>
                </div>
                <div className="text-center">
                  <p className="text-lg font-medium text-gray-700">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                  </p>
                  <p className="text-sm text-gray-500 mt-1">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
                </div>
              </div>
            </div>
          )}

          {/* Mobile View */}
          <div className="block lg:hidden">
            {loading
              ? // Loading skeleton for mobile
                Array.from({ length: 3 }).map((_, index) => (
                  <div
                    key={`mobile-loading-${index}`}
                    className="border-b border-gray-200 p-4 animate-pulse"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <div className="h-5 bg-gray-200 rounded w-32 mb-2"></div>
                        <div className="h-4 bg-gray-200 rounded w-24"></div>
                      </div>
                      <div className="h-6 bg-gray-200 rounded-full w-16"></div>
                    </div>

                    <div className="space-y-2 mb-4">
                      <div className="flex items-center gap-2">
                        <div className="h-4 w-4 bg-gray-200 rounded"></div>
                        <div className="h-4 bg-gray-200 rounded w-40"></div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="h-4 w-4 bg-gray-200 rounded"></div>
                        <div className="h-4 bg-gray-200 rounded w-48"></div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="h-4 w-4 bg-gray-200 rounded"></div>
                        <div className="h-4 bg-gray-200 rounded w-36"></div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="h-4 w-4 bg-gray-200 rounded"></div>
                        <div className="h-4 bg-gray-200 rounded w-52"></div>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <div className="flex-1 h-10 bg-gray-200 rounded-lg"></div>
                      <div className="flex-1 h-10 bg-gray-200 rounded-lg"></div>
                    </div>
                  </div>
                ))
              : currentData.map((item: any) => (
                  <div key={item.id} className={`border-b border-gray-200 p-4 ${getRowHighlight(item)}`}>
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <h3 className="font-semibold text-gray-800">
                          {item.load_id}
                        </h3>
                        <p className="text-sm text-gray-600">
                          {item.driver_name}
                        </p>
                      </div>
                      <div className="flex flex-col gap-2 items-end">
                        <span
                          className={`px-3 py-1 rounded-full text-xs font-medium shadow-sm border ${getStatusColor(
                            item.status
                          )}`}
                        >
                          {item.status}
                        </span>
                        {item.job_type &&
                          (item.job_type === "‡∏î‡∏£‡∏≠‡∏õ" ||
                            item.job_type === "‡∏ó‡∏≠‡∏¢") && (
                            <span
                              className={`px-2 py-1 rounded-md text-xs font-medium shadow-sm border ${
                                item.job_type === "‡∏î‡∏£‡∏≠‡∏õ"
                                  ? "bg-gradient-to-r from-purple-50 to-purple-100 text-purple-800 border-purple-200"
                                  : "bg-gradient-to-r from-indigo-50 to-indigo-100 text-indigo-800 border-indigo-200"
                              }`}
                            >
                              üöõ {item.job_type}
                            </span>
                          )}
                      </div>
                    </div>

                    <div className="space-y-2 mb-4">
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <Truck size={16} />
                        <span>
                          {item.h_plate} - {item.t_plate}
                        </span>
                      </div>
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <MapPin size={16} />
                        <span>
                          {item.locat_recive} - {item.locat_deliver}
                        </span>
                      </div>
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <Clock size={16} />
                        <span>
                          {item.date_recive} - {item.date_deliver}
                        </span>
                      </div>
                      <div className="flex text-wrap items-center gap-2 text-sm text-gray-600">
                        <NotebookPen size={16} />
                        <span>{item.remark}</span>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <button
                        onClick={() => handleView(item.load_id)}
                        className="flex-1 cursor-pointer bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors"
                      >
                        <Eye size={16} />
                        ‡∏î‡∏π
                      </button>
                     
                      <button
                        onClick={() =>
                          setDeleteAlert({ show: true, load_id: item.load_id })
                        }
                        className="flex-1 bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors"
                      >
                        <Trash2 size={16} />
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                      </button>

                      
                    </div>
                    <div className="mt-2 flex gap-2">
                     <button
                      onClick={() => setmodalMap({ show: true})}
                      className="flex-1 bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors"
                    >
                      <MapPin  size={16} />
                        ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                      </button>
                    </div>
                  </div>
                ))}
          </div>

          {/* Desktop View */}
          <div className="hidden lg:block overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-300">
                <tr>
                  <th className="px-6 py-4 text-left text-sm font-medium text-gray-600 w-30">
                    ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏ô‡∏™‡πà‡∏á <br /> {renderSortIcons("load_id")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏à‡∏™. <br /> {renderSortIcons("driver_name")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600 w-30">
                    ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ <br /> {renderSortIcons("h_plate")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á <br /> {renderSortIcons("locat_recive")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á <br /> {renderSortIcons("locat_deliver")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ <br /> {renderSortIcons("date_recive")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ <br /> {renderSortIcons("date_deliver")}
                  </th>
                  <th className="px-2 py-4 text-center text-sm font-medium text-gray-600 min-w-[160px]">
                    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ & ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó <br /> {renderSortIcons("status")}
                  </th>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-600">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
                  </th>
                  <th className="px-4 py-4 text-center text-sm font-medium text-gray-600">
                    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                  </th>
                </tr>
              </thead>

              {/* Rows Data */}

              <tbody className="divide-y divide-white">
                {loading 
                  ? 
                    Array.from({ length: 5 }).map((_, index) => (
                      <tr key={`loading-${index}`} className="animate-pulse">
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-24"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-32"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-28"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-36"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-36"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-24"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-24"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-6 bg-gray-200 rounded-full w-20"></div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="h-4 bg-gray-200 rounded w-40"></div>
                        </td>
                        <td className="px-6 py-4 bg-gray-50">
                          <div className="flex justify-center gap-2">
                            <div className="h-8 w-8 bg-gray-200 rounded-lg"></div>
                            <div className="h-8 w-8 bg-gray-200 rounded-lg"></div>
                          </div>
                        </td>
                      </tr>
                    ))
                  : currentData.map((item) => (
                      <tr
                        key={item.load_id}
                        className={`hover:bg-gray-100 transition-colors ${getRowHighlight(item)}`}
                      >
                        <td className="px-6 py-4 text-xs font-medium text-gray-800">
                          {item.load_id}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.driver_name}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.h_plate} / {item.t_plate}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.locat_recive}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.locat_deliver}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.date_recive}
                        </td>
                        <td className="px-6 py-4 text-xs text-gray-600">
                          {item.date_deliver}
                        </td>
                        <td className="px-2 py-4 min-w-[160px]">
                          <div className="flex flex-col gap-2">
                            {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å */}
                            <div className="flex justify-center">
                              <span
                                className={`px-3 py-1 rounded-full text-xs font-medium text-center min-w-[120px] shadow-sm border ${getStatusColor(
                                  item.status
                                )}`}
                              >
                                {item.status}
                              </span>
                            </div>

                            {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô */}
                            {item.job_type &&
                              (item.job_type === "‡∏î‡∏£‡∏≠‡∏õ" ||
                                item.job_type === "‡∏ó‡∏≠‡∏¢") && (
                                <div className="flex justify-center">
                                  <span
                                    className={`px-2 py-1 rounded-md text-xs font-medium text-center min-w-[80px] shadow-sm border ${
                                      item.job_type === "‡∏î‡∏£‡∏≠‡∏õ"
                                        ? "bg-gradient-to-r from-purple-50 to-purple-100 text-purple-800 border-purple-200"
                                        : "bg-gradient-to-r from-orange-50 to-orange-100 text-orange-800 border-orange-200"
                                    }`}
                                  >
                                    üöõ {item.job_type}
                                  </span>
                                </div>
                              )}
                          </div>
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-600">
                          {item.remark}
                        </td>
                        <td className="px-6 py-4 bg-gray-50">
                          <div className="flex justify-center gap-2">
                            <button
                              className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-lg"
                              onClick={() => handleView(item.load_id)}
                            >
                              <Eye size={16} />
                            </button>
                            
                            <button className="bg-yellow-500 hover:bg-yellow-600 text-white p-2 rounded-lg">
                        <MapPin size={16} 
                       onClick={() => setmodalMap({ show: true})}
                        />
                      </button>


                            <button className="bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg">
                              <Trash2
                                size={16}
                                onClick={() =>
                                  setDeleteAlert({
                                    show: true,
                                    load_id: item.load_id,
                                  })
                                }
                              />
                            </button>

                            

                          </div>
                        </td>
                      </tr>
                    ))}
              </tbody>
            </table>
          </div>

          {transportData.length === 0 && !loading && (
            <div className="text-center py-12">
              <Package size={48} className="mx-auto text-gray-400 mb-4" />
              <p className="text-gray-500 text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
              <p className="text-gray-400 text-sm mt-2">
                ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
              </p>
            </div>
          )}

          <div className="flex justify-end items-center m-4 gap-2 text-sm text-gray-600">
            <button
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((p) => p - 1)}
              className="px-3 py-1 border rounded hover:bg-gray-100  disabled:opacity-40"
            >
              ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </button>
            <span>
              ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}
            </span>
            <button
              disabled={currentPage === totalPages}
              onClick={() => setCurrentPage((p) => p + 1)}
              className="px-3 py-1 border rounded hover:bg-gray-100  disabled:opacity-40"
            >
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </button>
          </div>
        </div>
      </div>

      {/* Alert ‡∏Å‡∏≤‡∏£‡∏•‡∏ö */}
      {deleteAlert.show && (
        <div className="fixed inset-0 bg-opacity-40 backdrop-blur-sm flex items-center justify-center z-100 p-4">
          <div className="bg-white rounded-2xl p-6 max-w-md w-full shadow-2xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-red-100 rounded-full">
                <AlertCircle className="h-6 w-6 text-red-600" />
              </div>
              <h3 className="text-lg font-semibold text-gray-800">
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </h3>
            </div>

            <p className="text-gray-600 mb-6">
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
            </p>
            <div className="flex justify-start mb-4">
              <select
                value={cancel}
                onChange={(e) => setCancel(e.target.value)}
                className="px-6 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
              >
                <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                <option value="‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ï‡∏Å‡∏Ñ‡∏¥‡∏ß</option>
                <option value="‡∏ã‡πà‡∏≠‡∏°">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ã‡πà‡∏≠‡∏°</option>
                <option value="‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</option>
              </select>
            </div>
            <div className="flex gap-3 justify-end">
              <button
                onClick={() => setDeleteAlert({ show: false, load_id: "" })}
                className="px-6 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
              >
                ‡∏õ‡∏¥‡∏î
              </button>
              <button
                onClick={() => {
                  confirmDelete();
                }}
                className="px-6 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
              >
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ */}
      {modalView.show && (
        <AdminView
          jobView={modalView.job}
          closeModal={(close: boolean) => handleClose(close)}
          refreshTable={() => handleSearch()}
        />
      )}

      {modalCreate.show && (
        <AdminCreateNew
          closeModal={(close: boolean) => handleClose(close)}
          refreshTable={() => handleSearch()}
        />
      )}
      
      {modalMap.show && (
        <AdminMap
         jobView={modalView.job}
          closeModal={(close: boolean) => handleClose(close)}
          refreshTable={() => handleSearch()}
        />
      )}

    </div>
  );
};
